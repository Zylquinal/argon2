// Generated by jextract

package com.zylquinal.argon2.internal;

import java.io.IOException;
import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class argon2_h {

    argon2_h() {
        // Should not be called directly
    }

    static final Linker LINKER = Linker.nativeLinker();
    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP;

    static {
        try {
            NativeUtils.loadLibraryFromJar();
        } catch (IOException e) {
            throw new RuntimeException("Failed to load libargon2 library");
        }
        SymbolLookup loaderLookup = SymbolLookup.loaderLookup();
        SYMBOL_LOOKUP = name -> loaderLookup.find(name).or(() -> LINKER.defaultLookup().find(name));
    }

    public static final OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final OfInt C_INT = ValueLayout.JAVA_INT;
    public static final OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));
    public static final OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int _STDINT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return _STDINT_H;
    }
    private static final int _FEATURES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return _FEATURES_H;
    }
    private static final int _DEFAULT_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return _DEFAULT_SOURCE;
    }
    private static final int __GLIBC_USE_ISOC2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return __GLIBC_USE_ISOC2X;
    }
    private static final int __USE_ISOC11 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return __USE_ISOC11;
    }
    private static final int __USE_ISOC99 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return __USE_ISOC99;
    }
    private static final int __USE_ISOC95 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return __USE_ISOC95;
    }
    private static final int __USE_POSIX_IMPLICITLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return __USE_POSIX_IMPLICITLY;
    }
    private static final int _POSIX_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return _POSIX_SOURCE;
    }
    private static final int __USE_POSIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return __USE_POSIX;
    }
    private static final int __USE_POSIX2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return __USE_POSIX2;
    }
    private static final int __USE_POSIX199309 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return __USE_POSIX199309;
    }
    private static final int __USE_POSIX199506 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return __USE_POSIX199506;
    }
    private static final int __USE_XOPEN2K = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return __USE_XOPEN2K;
    }
    private static final int __USE_XOPEN2K8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return __USE_XOPEN2K8;
    }
    private static final int _ATFILE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return _ATFILE_SOURCE;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __WORDSIZE_TIME64_COMPAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return __WORDSIZE_TIME64_COMPAT32;
    }
    private static final int __SYSCALL_WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return __SYSCALL_WORDSIZE;
    }
    private static final int __USE_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return __USE_MISC;
    }
    private static final int __USE_ATFILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return __USE_ATFILE;
    }
    private static final int __USE_FORTIFY_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return __USE_FORTIFY_LEVEL;
    }
    private static final int __GLIBC_USE_DEPRECATED_GETS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return __GLIBC_USE_DEPRECATED_GETS;
    }
    private static final int __GLIBC_USE_DEPRECATED_SCANF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return __GLIBC_USE_DEPRECATED_SCANF;
    }
    private static final int _STDC_PREDEF_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return _STDC_PREDEF_H;
    }
    private static final int __STDC_IEC_559__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return __STDC_IEC_559__;
    }
    private static final int __STDC_IEC_559_COMPLEX__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return __STDC_IEC_559_COMPLEX__;
    }
    private static final int __GNU_LIBRARY__ = (int)6L;
    /**
     * {@snippet lang=c :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return __GNU_LIBRARY__;
    }
    private static final int __GLIBC__ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return __GLIBC__;
    }
    private static final int __GLIBC_MINOR__ = (int)35L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_MINOR__ 35
     * }
     */
    public static int __GLIBC_MINOR__() {
        return __GLIBC_MINOR__;
    }
    private static final int _SYS_CDEFS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return _SYS_CDEFS_H;
    }
    private static final int __glibc_c99_flexarr_available = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return __glibc_c99_flexarr_available;
    }
    private static final int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI;
    }
    private static final int __HAVE_GENERIC_SELECTION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return __HAVE_GENERIC_SELECTION;
    }
    private static final int __GLIBC_USE_LIB_EXT2 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return __GLIBC_USE_LIB_EXT2;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return __GLIBC_USE_IEC_60559_BFP_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_BFP_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return __GLIBC_USE_IEC_60559_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_TYPES_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return __GLIBC_USE_IEC_60559_TYPES_EXT;
    }
    private static final int _BITS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return _BITS_TYPES_H;
    }
    private static final int _BITS_TYPESIZES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return _BITS_TYPESIZES_H;
    }
    private static final int __OFF_T_MATCHES_OFF64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return __OFF_T_MATCHES_OFF64_T;
    }
    private static final int __INO_T_MATCHES_INO64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return __INO_T_MATCHES_INO64_T;
    }
    private static final int __RLIM_T_MATCHES_RLIM64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return __RLIM_T_MATCHES_RLIM64_T;
    }
    private static final int __STATFS_MATCHES_STATFS64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return __STATFS_MATCHES_STATFS64;
    }
    private static final int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64;
    }
    private static final int __FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return __FD_SETSIZE;
    }
    private static final int _BITS_TIME64_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return _BITS_TIME64_H;
    }
    private static final int _BITS_WCHAR_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return _BITS_WCHAR_H;
    }
    private static final int _BITS_STDINT_INTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return _BITS_STDINT_INTN_H;
    }
    private static final int _BITS_STDINT_UINTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return _BITS_STDINT_UINTN_H;
    }
    private static final int _LIBC_LIMITS_H_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _LIBC_LIMITS_H_ 1
     * }
     */
    public static int _LIBC_LIMITS_H_() {
        return _LIBC_LIMITS_H_;
    }
    private static final int MB_LEN_MAX = (int)16L;
    /**
     * {@snippet lang=c :
     * #define MB_LEN_MAX 16
     * }
     */
    public static int MB_LEN_MAX() {
        return MB_LEN_MAX;
    }
    private static final int _BITS_POSIX1_LIM_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_POSIX1_LIM_H 1
     * }
     */
    public static int _BITS_POSIX1_LIM_H() {
        return _BITS_POSIX1_LIM_H;
    }
    private static final int _POSIX_AIO_LISTIO_MAX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_AIO_LISTIO_MAX 2
     * }
     */
    public static int _POSIX_AIO_LISTIO_MAX() {
        return _POSIX_AIO_LISTIO_MAX;
    }
    private static final int _POSIX_AIO_MAX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_AIO_MAX 1
     * }
     */
    public static int _POSIX_AIO_MAX() {
        return _POSIX_AIO_MAX;
    }
    private static final int _POSIX_ARG_MAX = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_ARG_MAX 4096
     * }
     */
    public static int _POSIX_ARG_MAX() {
        return _POSIX_ARG_MAX;
    }
    private static final int _POSIX_CHILD_MAX = (int)25L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_CHILD_MAX 25
     * }
     */
    public static int _POSIX_CHILD_MAX() {
        return _POSIX_CHILD_MAX;
    }
    private static final int _POSIX_DELAYTIMER_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_DELAYTIMER_MAX 32
     * }
     */
    public static int _POSIX_DELAYTIMER_MAX() {
        return _POSIX_DELAYTIMER_MAX;
    }
    private static final int _POSIX_HOST_NAME_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_HOST_NAME_MAX 255
     * }
     */
    public static int _POSIX_HOST_NAME_MAX() {
        return _POSIX_HOST_NAME_MAX;
    }
    private static final int _POSIX_LINK_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_LINK_MAX 8
     * }
     */
    public static int _POSIX_LINK_MAX() {
        return _POSIX_LINK_MAX;
    }
    private static final int _POSIX_LOGIN_NAME_MAX = (int)9L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_LOGIN_NAME_MAX 9
     * }
     */
    public static int _POSIX_LOGIN_NAME_MAX() {
        return _POSIX_LOGIN_NAME_MAX;
    }
    private static final int _POSIX_MAX_CANON = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_MAX_CANON 255
     * }
     */
    public static int _POSIX_MAX_CANON() {
        return _POSIX_MAX_CANON;
    }
    private static final int _POSIX_MAX_INPUT = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_MAX_INPUT 255
     * }
     */
    public static int _POSIX_MAX_INPUT() {
        return _POSIX_MAX_INPUT;
    }
    private static final int _POSIX_MQ_OPEN_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_MQ_OPEN_MAX 8
     * }
     */
    public static int _POSIX_MQ_OPEN_MAX() {
        return _POSIX_MQ_OPEN_MAX;
    }
    private static final int _POSIX_MQ_PRIO_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_MQ_PRIO_MAX 32
     * }
     */
    public static int _POSIX_MQ_PRIO_MAX() {
        return _POSIX_MQ_PRIO_MAX;
    }
    private static final int _POSIX_NAME_MAX = (int)14L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_NAME_MAX 14
     * }
     */
    public static int _POSIX_NAME_MAX() {
        return _POSIX_NAME_MAX;
    }
    private static final int _POSIX_NGROUPS_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_NGROUPS_MAX 8
     * }
     */
    public static int _POSIX_NGROUPS_MAX() {
        return _POSIX_NGROUPS_MAX;
    }
    private static final int _POSIX_OPEN_MAX = (int)20L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_OPEN_MAX 20
     * }
     */
    public static int _POSIX_OPEN_MAX() {
        return _POSIX_OPEN_MAX;
    }
    private static final int _POSIX_PATH_MAX = (int)256L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_PATH_MAX 256
     * }
     */
    public static int _POSIX_PATH_MAX() {
        return _POSIX_PATH_MAX;
    }
    private static final int _POSIX_PIPE_BUF = (int)512L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_PIPE_BUF 512
     * }
     */
    public static int _POSIX_PIPE_BUF() {
        return _POSIX_PIPE_BUF;
    }
    private static final int _POSIX_RE_DUP_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_RE_DUP_MAX 255
     * }
     */
    public static int _POSIX_RE_DUP_MAX() {
        return _POSIX_RE_DUP_MAX;
    }
    private static final int _POSIX_RTSIG_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_RTSIG_MAX 8
     * }
     */
    public static int _POSIX_RTSIG_MAX() {
        return _POSIX_RTSIG_MAX;
    }
    private static final int _POSIX_SEM_NSEMS_MAX = (int)256L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SEM_NSEMS_MAX 256
     * }
     */
    public static int _POSIX_SEM_NSEMS_MAX() {
        return _POSIX_SEM_NSEMS_MAX;
    }
    private static final int _POSIX_SEM_VALUE_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SEM_VALUE_MAX 32767
     * }
     */
    public static int _POSIX_SEM_VALUE_MAX() {
        return _POSIX_SEM_VALUE_MAX;
    }
    private static final int _POSIX_SIGQUEUE_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SIGQUEUE_MAX 32
     * }
     */
    public static int _POSIX_SIGQUEUE_MAX() {
        return _POSIX_SIGQUEUE_MAX;
    }
    private static final int _POSIX_SSIZE_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SSIZE_MAX 32767
     * }
     */
    public static int _POSIX_SSIZE_MAX() {
        return _POSIX_SSIZE_MAX;
    }
    private static final int _POSIX_STREAM_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_STREAM_MAX 8
     * }
     */
    public static int _POSIX_STREAM_MAX() {
        return _POSIX_STREAM_MAX;
    }
    private static final int _POSIX_SYMLINK_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SYMLINK_MAX 255
     * }
     */
    public static int _POSIX_SYMLINK_MAX() {
        return _POSIX_SYMLINK_MAX;
    }
    private static final int _POSIX_SYMLOOP_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SYMLOOP_MAX 8
     * }
     */
    public static int _POSIX_SYMLOOP_MAX() {
        return _POSIX_SYMLOOP_MAX;
    }
    private static final int _POSIX_TIMER_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_TIMER_MAX 32
     * }
     */
    public static int _POSIX_TIMER_MAX() {
        return _POSIX_TIMER_MAX;
    }
    private static final int _POSIX_TTY_NAME_MAX = (int)9L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_TTY_NAME_MAX 9
     * }
     */
    public static int _POSIX_TTY_NAME_MAX() {
        return _POSIX_TTY_NAME_MAX;
    }
    private static final int _POSIX_TZNAME_MAX = (int)6L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_TZNAME_MAX 6
     * }
     */
    public static int _POSIX_TZNAME_MAX() {
        return _POSIX_TZNAME_MAX;
    }
    private static final int _POSIX_CLOCKRES_MIN = (int)20000000L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_CLOCKRES_MIN 20000000
     * }
     */
    public static int _POSIX_CLOCKRES_MIN() {
        return _POSIX_CLOCKRES_MIN;
    }
    private static final int NR_OPEN = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define NR_OPEN 1024
     * }
     */
    public static int NR_OPEN() {
        return NR_OPEN;
    }
    private static final int NGROUPS_MAX = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define NGROUPS_MAX 65536
     * }
     */
    public static int NGROUPS_MAX() {
        return NGROUPS_MAX;
    }
    private static final int ARG_MAX = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define ARG_MAX 131072
     * }
     */
    public static int ARG_MAX() {
        return ARG_MAX;
    }
    private static final int LINK_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define LINK_MAX 127
     * }
     */
    public static int LINK_MAX() {
        return LINK_MAX;
    }
    private static final int MAX_CANON = (int)255L;
    /**
     * {@snippet lang=c :
     * #define MAX_CANON 255
     * }
     */
    public static int MAX_CANON() {
        return MAX_CANON;
    }
    private static final int MAX_INPUT = (int)255L;
    /**
     * {@snippet lang=c :
     * #define MAX_INPUT 255
     * }
     */
    public static int MAX_INPUT() {
        return MAX_INPUT;
    }
    private static final int NAME_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define NAME_MAX 255
     * }
     */
    public static int NAME_MAX() {
        return NAME_MAX;
    }
    private static final int PATH_MAX = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define PATH_MAX 4096
     * }
     */
    public static int PATH_MAX() {
        return PATH_MAX;
    }
    private static final int PIPE_BUF = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define PIPE_BUF 4096
     * }
     */
    public static int PIPE_BUF() {
        return PIPE_BUF;
    }
    private static final int XATTR_NAME_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define XATTR_NAME_MAX 255
     * }
     */
    public static int XATTR_NAME_MAX() {
        return XATTR_NAME_MAX;
    }
    private static final int XATTR_SIZE_MAX = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define XATTR_SIZE_MAX 65536
     * }
     */
    public static int XATTR_SIZE_MAX() {
        return XATTR_SIZE_MAX;
    }
    private static final int XATTR_LIST_MAX = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define XATTR_LIST_MAX 65536
     * }
     */
    public static int XATTR_LIST_MAX() {
        return XATTR_LIST_MAX;
    }
    private static final int RTSIG_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define RTSIG_MAX 32
     * }
     */
    public static int RTSIG_MAX() {
        return RTSIG_MAX;
    }
    private static final int _POSIX_THREAD_KEYS_MAX = (int)128L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_KEYS_MAX 128
     * }
     */
    public static int _POSIX_THREAD_KEYS_MAX() {
        return _POSIX_THREAD_KEYS_MAX;
    }
    private static final int PTHREAD_KEYS_MAX = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define PTHREAD_KEYS_MAX 1024
     * }
     */
    public static int PTHREAD_KEYS_MAX() {
        return PTHREAD_KEYS_MAX;
    }
    private static final int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4
     * }
     */
    public static int _POSIX_THREAD_DESTRUCTOR_ITERATIONS() {
        return _POSIX_THREAD_DESTRUCTOR_ITERATIONS;
    }
    private static final int _POSIX_THREAD_THREADS_MAX = (int)64L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_THREADS_MAX 64
     * }
     */
    public static int _POSIX_THREAD_THREADS_MAX() {
        return _POSIX_THREAD_THREADS_MAX;
    }
    private static final int AIO_PRIO_DELTA_MAX = (int)20L;
    /**
     * {@snippet lang=c :
     * #define AIO_PRIO_DELTA_MAX 20
     * }
     */
    public static int AIO_PRIO_DELTA_MAX() {
        return AIO_PRIO_DELTA_MAX;
    }
    private static final int PTHREAD_STACK_MIN = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define PTHREAD_STACK_MIN 16384
     * }
     */
    public static int PTHREAD_STACK_MIN() {
        return PTHREAD_STACK_MIN;
    }
    private static final int DELAYTIMER_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define DELAYTIMER_MAX 2147483647
     * }
     */
    public static int DELAYTIMER_MAX() {
        return DELAYTIMER_MAX;
    }
    private static final int TTY_NAME_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define TTY_NAME_MAX 32
     * }
     */
    public static int TTY_NAME_MAX() {
        return TTY_NAME_MAX;
    }
    private static final int LOGIN_NAME_MAX = (int)256L;
    /**
     * {@snippet lang=c :
     * #define LOGIN_NAME_MAX 256
     * }
     */
    public static int LOGIN_NAME_MAX() {
        return LOGIN_NAME_MAX;
    }
    private static final int HOST_NAME_MAX = (int)64L;
    /**
     * {@snippet lang=c :
     * #define HOST_NAME_MAX 64
     * }
     */
    public static int HOST_NAME_MAX() {
        return HOST_NAME_MAX;
    }
    private static final int MQ_PRIO_MAX = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define MQ_PRIO_MAX 32768
     * }
     */
    public static int MQ_PRIO_MAX() {
        return MQ_PRIO_MAX;
    }
    private static final int _BITS_POSIX2_LIM_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_POSIX2_LIM_H 1
     * }
     */
    public static int _BITS_POSIX2_LIM_H() {
        return _BITS_POSIX2_LIM_H;
    }
    private static final int _POSIX2_BC_BASE_MAX = (int)99L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_BC_BASE_MAX 99
     * }
     */
    public static int _POSIX2_BC_BASE_MAX() {
        return _POSIX2_BC_BASE_MAX;
    }
    private static final int _POSIX2_BC_DIM_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_BC_DIM_MAX 2048
     * }
     */
    public static int _POSIX2_BC_DIM_MAX() {
        return _POSIX2_BC_DIM_MAX;
    }
    private static final int _POSIX2_BC_SCALE_MAX = (int)99L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_BC_SCALE_MAX 99
     * }
     */
    public static int _POSIX2_BC_SCALE_MAX() {
        return _POSIX2_BC_SCALE_MAX;
    }
    private static final int _POSIX2_BC_STRING_MAX = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_BC_STRING_MAX 1000
     * }
     */
    public static int _POSIX2_BC_STRING_MAX() {
        return _POSIX2_BC_STRING_MAX;
    }
    private static final int _POSIX2_COLL_WEIGHTS_MAX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_COLL_WEIGHTS_MAX 2
     * }
     */
    public static int _POSIX2_COLL_WEIGHTS_MAX() {
        return _POSIX2_COLL_WEIGHTS_MAX;
    }
    private static final int _POSIX2_EXPR_NEST_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_EXPR_NEST_MAX 32
     * }
     */
    public static int _POSIX2_EXPR_NEST_MAX() {
        return _POSIX2_EXPR_NEST_MAX;
    }
    private static final int _POSIX2_LINE_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_LINE_MAX 2048
     * }
     */
    public static int _POSIX2_LINE_MAX() {
        return _POSIX2_LINE_MAX;
    }
    private static final int _POSIX2_RE_DUP_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_RE_DUP_MAX 255
     * }
     */
    public static int _POSIX2_RE_DUP_MAX() {
        return _POSIX2_RE_DUP_MAX;
    }
    private static final int _POSIX2_CHARCLASS_NAME_MAX = (int)14L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_CHARCLASS_NAME_MAX 14
     * }
     */
    public static int _POSIX2_CHARCLASS_NAME_MAX() {
        return _POSIX2_CHARCLASS_NAME_MAX;
    }
    private static final int COLL_WEIGHTS_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define COLL_WEIGHTS_MAX 255
     * }
     */
    public static int COLL_WEIGHTS_MAX() {
        return COLL_WEIGHTS_MAX;
    }
    private static final int CHARCLASS_NAME_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define CHARCLASS_NAME_MAX 2048
     * }
     */
    public static int CHARCLASS_NAME_MAX() {
        return CHARCLASS_NAME_MAX;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = argon2_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = argon2_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = argon2_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = argon2_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = argon2_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = argon2_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = argon2_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = argon2_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = argon2_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = argon2_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = argon2_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = argon2_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = argon2_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = argon2_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t uint8_t
     * }
     */
    public static final OfByte uint8_t = argon2_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t uint16_t
     * }
     */
    public static final OfShort uint16_t = argon2_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t uint32_t
     * }
     */
    public static final OfInt uint32_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t uint64_t
     * }
     */
    public static final OfLong uint64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int_least8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = argon2_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int_least16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = argon2_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int_least32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int_least64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint_least8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = argon2_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint_least16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = argon2_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = argon2_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = argon2_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef long int_fast16_t
     * }
     */
    public static final OfLong int_fast16_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast32_t
     * }
     */
    public static final OfLong int_fast32_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = argon2_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast16_t
     * }
     */
    public static final OfLong uint_fast16_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast32_t
     * }
     */
    public static final OfLong uint_fast32_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intptr_t
     * }
     */
    public static final OfLong intptr_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __intmax_t intmax_t
     * }
     */
    public static final OfLong intmax_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uintmax_t uintmax_t
     * }
     */
    public static final OfLong uintmax_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = argon2_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = argon2_h.C_INT;

    private static class FLAG_clear_internal_memory$constants {
        public static final OfInt LAYOUT = argon2_h.C_INT;
        public static final MemorySegment SEGMENT = argon2_h.findOrThrow("FLAG_clear_internal_memory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int FLAG_clear_internal_memory
     * }
     */
    public static OfInt FLAG_clear_internal_memory$layout() {
        return FLAG_clear_internal_memory$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int FLAG_clear_internal_memory
     * }
     */
    public static MemorySegment FLAG_clear_internal_memory$segment() {
        return FLAG_clear_internal_memory$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int FLAG_clear_internal_memory
     * }
     */
    public static int FLAG_clear_internal_memory() {
        return FLAG_clear_internal_memory$constants.SEGMENT.get(FLAG_clear_internal_memory$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int FLAG_clear_internal_memory
     * }
     */
    public static void FLAG_clear_internal_memory(int varValue) {
        FLAG_clear_internal_memory$constants.SEGMENT.set(FLAG_clear_internal_memory$constants.LAYOUT, 0L, varValue);
    }
    private static final int ARGON2_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_OK = 0
     * }
     */
    public static int ARGON2_OK() {
        return ARGON2_OK;
    }
    private static final int ARGON2_OUTPUT_PTR_NULL = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_OUTPUT_PTR_NULL = -1
     * }
     */
    public static int ARGON2_OUTPUT_PTR_NULL() {
        return ARGON2_OUTPUT_PTR_NULL;
    }
    private static final int ARGON2_OUTPUT_TOO_SHORT = (int)-2L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_OUTPUT_TOO_SHORT = -2
     * }
     */
    public static int ARGON2_OUTPUT_TOO_SHORT() {
        return ARGON2_OUTPUT_TOO_SHORT;
    }
    private static final int ARGON2_OUTPUT_TOO_LONG = (int)-3L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_OUTPUT_TOO_LONG = -3
     * }
     */
    public static int ARGON2_OUTPUT_TOO_LONG() {
        return ARGON2_OUTPUT_TOO_LONG;
    }
    private static final int ARGON2_PWD_TOO_SHORT = (int)-4L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_PWD_TOO_SHORT = -4
     * }
     */
    public static int ARGON2_PWD_TOO_SHORT() {
        return ARGON2_PWD_TOO_SHORT;
    }
    private static final int ARGON2_PWD_TOO_LONG = (int)-5L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_PWD_TOO_LONG = -5
     * }
     */
    public static int ARGON2_PWD_TOO_LONG() {
        return ARGON2_PWD_TOO_LONG;
    }
    private static final int ARGON2_SALT_TOO_SHORT = (int)-6L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_SALT_TOO_SHORT = -6
     * }
     */
    public static int ARGON2_SALT_TOO_SHORT() {
        return ARGON2_SALT_TOO_SHORT;
    }
    private static final int ARGON2_SALT_TOO_LONG = (int)-7L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_SALT_TOO_LONG = -7
     * }
     */
    public static int ARGON2_SALT_TOO_LONG() {
        return ARGON2_SALT_TOO_LONG;
    }
    private static final int ARGON2_AD_TOO_SHORT = (int)-8L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_AD_TOO_SHORT = -8
     * }
     */
    public static int ARGON2_AD_TOO_SHORT() {
        return ARGON2_AD_TOO_SHORT;
    }
    private static final int ARGON2_AD_TOO_LONG = (int)-9L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_AD_TOO_LONG = -9
     * }
     */
    public static int ARGON2_AD_TOO_LONG() {
        return ARGON2_AD_TOO_LONG;
    }
    private static final int ARGON2_SECRET_TOO_SHORT = (int)-10L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_SECRET_TOO_SHORT = -10
     * }
     */
    public static int ARGON2_SECRET_TOO_SHORT() {
        return ARGON2_SECRET_TOO_SHORT;
    }
    private static final int ARGON2_SECRET_TOO_LONG = (int)-11L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_SECRET_TOO_LONG = -11
     * }
     */
    public static int ARGON2_SECRET_TOO_LONG() {
        return ARGON2_SECRET_TOO_LONG;
    }
    private static final int ARGON2_TIME_TOO_SMALL = (int)-12L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_TIME_TOO_SMALL = -12
     * }
     */
    public static int ARGON2_TIME_TOO_SMALL() {
        return ARGON2_TIME_TOO_SMALL;
    }
    private static final int ARGON2_TIME_TOO_LARGE = (int)-13L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_TIME_TOO_LARGE = -13
     * }
     */
    public static int ARGON2_TIME_TOO_LARGE() {
        return ARGON2_TIME_TOO_LARGE;
    }
    private static final int ARGON2_MEMORY_TOO_LITTLE = (int)-14L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_MEMORY_TOO_LITTLE = -14
     * }
     */
    public static int ARGON2_MEMORY_TOO_LITTLE() {
        return ARGON2_MEMORY_TOO_LITTLE;
    }
    private static final int ARGON2_MEMORY_TOO_MUCH = (int)-15L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_MEMORY_TOO_MUCH = -15
     * }
     */
    public static int ARGON2_MEMORY_TOO_MUCH() {
        return ARGON2_MEMORY_TOO_MUCH;
    }
    private static final int ARGON2_LANES_TOO_FEW = (int)-16L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_LANES_TOO_FEW = -16
     * }
     */
    public static int ARGON2_LANES_TOO_FEW() {
        return ARGON2_LANES_TOO_FEW;
    }
    private static final int ARGON2_LANES_TOO_MANY = (int)-17L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_LANES_TOO_MANY = -17
     * }
     */
    public static int ARGON2_LANES_TOO_MANY() {
        return ARGON2_LANES_TOO_MANY;
    }
    private static final int ARGON2_PWD_PTR_MISMATCH = (int)-18L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_PWD_PTR_MISMATCH = -18
     * }
     */
    public static int ARGON2_PWD_PTR_MISMATCH() {
        return ARGON2_PWD_PTR_MISMATCH;
    }
    private static final int ARGON2_SALT_PTR_MISMATCH = (int)-19L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_SALT_PTR_MISMATCH = -19
     * }
     */
    public static int ARGON2_SALT_PTR_MISMATCH() {
        return ARGON2_SALT_PTR_MISMATCH;
    }
    private static final int ARGON2_SECRET_PTR_MISMATCH = (int)-20L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_SECRET_PTR_MISMATCH = -20
     * }
     */
    public static int ARGON2_SECRET_PTR_MISMATCH() {
        return ARGON2_SECRET_PTR_MISMATCH;
    }
    private static final int ARGON2_AD_PTR_MISMATCH = (int)-21L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_AD_PTR_MISMATCH = -21
     * }
     */
    public static int ARGON2_AD_PTR_MISMATCH() {
        return ARGON2_AD_PTR_MISMATCH;
    }
    private static final int ARGON2_MEMORY_ALLOCATION_ERROR = (int)-22L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_MEMORY_ALLOCATION_ERROR = -22
     * }
     */
    public static int ARGON2_MEMORY_ALLOCATION_ERROR() {
        return ARGON2_MEMORY_ALLOCATION_ERROR;
    }
    private static final int ARGON2_FREE_MEMORY_CBK_NULL = (int)-23L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_FREE_MEMORY_CBK_NULL = -23
     * }
     */
    public static int ARGON2_FREE_MEMORY_CBK_NULL() {
        return ARGON2_FREE_MEMORY_CBK_NULL;
    }
    private static final int ARGON2_ALLOCATE_MEMORY_CBK_NULL = (int)-24L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_ALLOCATE_MEMORY_CBK_NULL = -24
     * }
     */
    public static int ARGON2_ALLOCATE_MEMORY_CBK_NULL() {
        return ARGON2_ALLOCATE_MEMORY_CBK_NULL;
    }
    private static final int ARGON2_INCORRECT_PARAMETER = (int)-25L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_INCORRECT_PARAMETER = -25
     * }
     */
    public static int ARGON2_INCORRECT_PARAMETER() {
        return ARGON2_INCORRECT_PARAMETER;
    }
    private static final int ARGON2_INCORRECT_TYPE = (int)-26L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_INCORRECT_TYPE = -26
     * }
     */
    public static int ARGON2_INCORRECT_TYPE() {
        return ARGON2_INCORRECT_TYPE;
    }
    private static final int ARGON2_OUT_PTR_MISMATCH = (int)-27L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_OUT_PTR_MISMATCH = -27
     * }
     */
    public static int ARGON2_OUT_PTR_MISMATCH() {
        return ARGON2_OUT_PTR_MISMATCH;
    }
    private static final int ARGON2_THREADS_TOO_FEW = (int)-28L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_THREADS_TOO_FEW = -28
     * }
     */
    public static int ARGON2_THREADS_TOO_FEW() {
        return ARGON2_THREADS_TOO_FEW;
    }
    private static final int ARGON2_THREADS_TOO_MANY = (int)-29L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_THREADS_TOO_MANY = -29
     * }
     */
    public static int ARGON2_THREADS_TOO_MANY() {
        return ARGON2_THREADS_TOO_MANY;
    }
    private static final int ARGON2_MISSING_ARGS = (int)-30L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_MISSING_ARGS = -30
     * }
     */
    public static int ARGON2_MISSING_ARGS() {
        return ARGON2_MISSING_ARGS;
    }
    private static final int ARGON2_ENCODING_FAIL = (int)-31L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_ENCODING_FAIL = -31
     * }
     */
    public static int ARGON2_ENCODING_FAIL() {
        return ARGON2_ENCODING_FAIL;
    }
    private static final int ARGON2_DECODING_FAIL = (int)-32L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_DECODING_FAIL = -32
     * }
     */
    public static int ARGON2_DECODING_FAIL() {
        return ARGON2_DECODING_FAIL;
    }
    private static final int ARGON2_THREAD_FAIL = (int)-33L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_THREAD_FAIL = -33
     * }
     */
    public static int ARGON2_THREAD_FAIL() {
        return ARGON2_THREAD_FAIL;
    }
    private static final int ARGON2_DECODING_LENGTH_FAIL = (int)-34L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_DECODING_LENGTH_FAIL = -34
     * }
     */
    public static int ARGON2_DECODING_LENGTH_FAIL() {
        return ARGON2_DECODING_LENGTH_FAIL;
    }
    private static final int ARGON2_VERIFY_MISMATCH = (int)-35L;
    /**
     * {@snippet lang=c :
     * enum Argon2_ErrorCodes.ARGON2_VERIFY_MISMATCH = -35
     * }
     */
    public static int ARGON2_VERIFY_MISMATCH() {
        return ARGON2_VERIFY_MISMATCH;
    }
    private static final int Argon2_d = (int)0L;
    /**
     * {@snippet lang=c :
     * enum Argon2_type.Argon2_d = 0
     * }
     */
    public static int Argon2_d() {
        return Argon2_d;
    }
    private static final int Argon2_i = (int)1L;
    /**
     * {@snippet lang=c :
     * enum Argon2_type.Argon2_i = 1
     * }
     */
    public static int Argon2_i() {
        return Argon2_i;
    }
    private static final int Argon2_id = (int)2L;
    /**
     * {@snippet lang=c :
     * enum Argon2_type.Argon2_id = 2
     * }
     */
    public static int Argon2_id() {
        return Argon2_id;
    }
    private static final int ARGON2_VERSION_10 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum Argon2_version.ARGON2_VERSION_10 = 16
     * }
     */
    public static int ARGON2_VERSION_10() {
        return ARGON2_VERSION_10;
    }
    private static final int ARGON2_VERSION_13 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum Argon2_version.ARGON2_VERSION_13 = 19
     * }
     */
    public static int ARGON2_VERSION_13() {
        return ARGON2_VERSION_13;
    }
    private static final int ARGON2_VERSION_NUMBER = (int)19L;
    /**
     * {@snippet lang=c :
     * enum Argon2_version.ARGON2_VERSION_NUMBER = 19
     * }
     */
    public static int ARGON2_VERSION_NUMBER() {
        return ARGON2_VERSION_NUMBER;
    }

    private static class argon2_type2string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_POINTER,
            argon2_h.C_INT,
            argon2_h.C_INT
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2_type2string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *argon2_type2string(argon2_type type, int uppercase)
     * }
     */
    public static FunctionDescriptor argon2_type2string$descriptor() {
        return argon2_type2string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *argon2_type2string(argon2_type type, int uppercase)
     * }
     */
    public static MethodHandle argon2_type2string$handle() {
        return argon2_type2string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *argon2_type2string(argon2_type type, int uppercase)
     * }
     */
    public static MemorySegment argon2_type2string$address() {
        return argon2_type2string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *argon2_type2string(argon2_type type, int uppercase)
     * }
     */
    public static MemorySegment argon2_type2string(int type, int uppercase) {
        var mh$ = argon2_type2string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2_type2string", type, uppercase);
            }
            return (MemorySegment)mh$.invokeExact(type, uppercase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2_ctx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_INT
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2_ctx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2_ctx(argon2_context *context, argon2_type type)
     * }
     */
    public static FunctionDescriptor argon2_ctx$descriptor() {
        return argon2_ctx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2_ctx(argon2_context *context, argon2_type type)
     * }
     */
    public static MethodHandle argon2_ctx$handle() {
        return argon2_ctx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2_ctx(argon2_context *context, argon2_type type)
     * }
     */
    public static MemorySegment argon2_ctx$address() {
        return argon2_ctx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2_ctx(argon2_context *context, argon2_type type)
     * }
     */
    public static int argon2_ctx(MemorySegment context, int type) {
        var mh$ = argon2_ctx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2_ctx", context, type);
            }
            return (int)mh$.invokeExact(context, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2i_hash_encoded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2i_hash_encoded");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2i_hash_encoded(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, const size_t hashlen, char *encoded, const size_t encodedlen)
     * }
     */
    public static FunctionDescriptor argon2i_hash_encoded$descriptor() {
        return argon2i_hash_encoded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2i_hash_encoded(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, const size_t hashlen, char *encoded, const size_t encodedlen)
     * }
     */
    public static MethodHandle argon2i_hash_encoded$handle() {
        return argon2i_hash_encoded.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2i_hash_encoded(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, const size_t hashlen, char *encoded, const size_t encodedlen)
     * }
     */
    public static MemorySegment argon2i_hash_encoded$address() {
        return argon2i_hash_encoded.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2i_hash_encoded(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, const size_t hashlen, char *encoded, const size_t encodedlen)
     * }
     */
    public static int argon2i_hash_encoded(int t_cost, int m_cost, int parallelism, MemorySegment pwd, long pwdlen, MemorySegment salt, long saltlen, long hashlen, MemorySegment encoded, long encodedlen) {
        var mh$ = argon2i_hash_encoded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2i_hash_encoded", t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hashlen, encoded, encodedlen);
            }
            return (int)mh$.invokeExact(t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hashlen, encoded, encodedlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2i_hash_raw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2i_hash_raw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2i_hash_raw(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen)
     * }
     */
    public static FunctionDescriptor argon2i_hash_raw$descriptor() {
        return argon2i_hash_raw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2i_hash_raw(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen)
     * }
     */
    public static MethodHandle argon2i_hash_raw$handle() {
        return argon2i_hash_raw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2i_hash_raw(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen)
     * }
     */
    public static MemorySegment argon2i_hash_raw$address() {
        return argon2i_hash_raw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2i_hash_raw(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen)
     * }
     */
    public static int argon2i_hash_raw(int t_cost, int m_cost, int parallelism, MemorySegment pwd, long pwdlen, MemorySegment salt, long saltlen, MemorySegment hash, long hashlen) {
        var mh$ = argon2i_hash_raw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2i_hash_raw", t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hash, hashlen);
            }
            return (int)mh$.invokeExact(t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hash, hashlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2d_hash_encoded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2d_hash_encoded");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2d_hash_encoded(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, const size_t hashlen, char *encoded, const size_t encodedlen)
     * }
     */
    public static FunctionDescriptor argon2d_hash_encoded$descriptor() {
        return argon2d_hash_encoded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2d_hash_encoded(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, const size_t hashlen, char *encoded, const size_t encodedlen)
     * }
     */
    public static MethodHandle argon2d_hash_encoded$handle() {
        return argon2d_hash_encoded.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2d_hash_encoded(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, const size_t hashlen, char *encoded, const size_t encodedlen)
     * }
     */
    public static MemorySegment argon2d_hash_encoded$address() {
        return argon2d_hash_encoded.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2d_hash_encoded(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, const size_t hashlen, char *encoded, const size_t encodedlen)
     * }
     */
    public static int argon2d_hash_encoded(int t_cost, int m_cost, int parallelism, MemorySegment pwd, long pwdlen, MemorySegment salt, long saltlen, long hashlen, MemorySegment encoded, long encodedlen) {
        var mh$ = argon2d_hash_encoded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2d_hash_encoded", t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hashlen, encoded, encodedlen);
            }
            return (int)mh$.invokeExact(t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hashlen, encoded, encodedlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2d_hash_raw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2d_hash_raw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2d_hash_raw(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen)
     * }
     */
    public static FunctionDescriptor argon2d_hash_raw$descriptor() {
        return argon2d_hash_raw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2d_hash_raw(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen)
     * }
     */
    public static MethodHandle argon2d_hash_raw$handle() {
        return argon2d_hash_raw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2d_hash_raw(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen)
     * }
     */
    public static MemorySegment argon2d_hash_raw$address() {
        return argon2d_hash_raw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2d_hash_raw(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen)
     * }
     */
    public static int argon2d_hash_raw(int t_cost, int m_cost, int parallelism, MemorySegment pwd, long pwdlen, MemorySegment salt, long saltlen, MemorySegment hash, long hashlen) {
        var mh$ = argon2d_hash_raw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2d_hash_raw", t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hash, hashlen);
            }
            return (int)mh$.invokeExact(t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hash, hashlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2id_hash_encoded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2id_hash_encoded");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2id_hash_encoded(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, const size_t hashlen, char *encoded, const size_t encodedlen)
     * }
     */
    public static FunctionDescriptor argon2id_hash_encoded$descriptor() {
        return argon2id_hash_encoded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2id_hash_encoded(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, const size_t hashlen, char *encoded, const size_t encodedlen)
     * }
     */
    public static MethodHandle argon2id_hash_encoded$handle() {
        return argon2id_hash_encoded.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2id_hash_encoded(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, const size_t hashlen, char *encoded, const size_t encodedlen)
     * }
     */
    public static MemorySegment argon2id_hash_encoded$address() {
        return argon2id_hash_encoded.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2id_hash_encoded(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, const size_t hashlen, char *encoded, const size_t encodedlen)
     * }
     */
    public static int argon2id_hash_encoded(int t_cost, int m_cost, int parallelism, MemorySegment pwd, long pwdlen, MemorySegment salt, long saltlen, long hashlen, MemorySegment encoded, long encodedlen) {
        var mh$ = argon2id_hash_encoded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2id_hash_encoded", t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hashlen, encoded, encodedlen);
            }
            return (int)mh$.invokeExact(t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hashlen, encoded, encodedlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2id_hash_raw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2id_hash_raw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2id_hash_raw(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen)
     * }
     */
    public static FunctionDescriptor argon2id_hash_raw$descriptor() {
        return argon2id_hash_raw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2id_hash_raw(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen)
     * }
     */
    public static MethodHandle argon2id_hash_raw$handle() {
        return argon2id_hash_raw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2id_hash_raw(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen)
     * }
     */
    public static MemorySegment argon2id_hash_raw$address() {
        return argon2id_hash_raw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2id_hash_raw(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen)
     * }
     */
    public static int argon2id_hash_raw(int t_cost, int m_cost, int parallelism, MemorySegment pwd, long pwdlen, MemorySegment salt, long saltlen, MemorySegment hash, long hashlen) {
        var mh$ = argon2id_hash_raw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2id_hash_raw", t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hash, hashlen);
            }
            return (int)mh$.invokeExact(t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hash, hashlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_INT,
            argon2_h.C_INT
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2_hash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2_hash(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen, char *encoded, const size_t encodedlen, argon2_type type, const uint32_t version)
     * }
     */
    public static FunctionDescriptor argon2_hash$descriptor() {
        return argon2_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2_hash(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen, char *encoded, const size_t encodedlen, argon2_type type, const uint32_t version)
     * }
     */
    public static MethodHandle argon2_hash$handle() {
        return argon2_hash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2_hash(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen, char *encoded, const size_t encodedlen, argon2_type type, const uint32_t version)
     * }
     */
    public static MemorySegment argon2_hash$address() {
        return argon2_hash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2_hash(const uint32_t t_cost, const uint32_t m_cost, const uint32_t parallelism, const void *pwd, const size_t pwdlen, const void *salt, const size_t saltlen, void *hash, const size_t hashlen, char *encoded, const size_t encodedlen, argon2_type type, const uint32_t version)
     * }
     */
    public static int argon2_hash(int t_cost, int m_cost, int parallelism, MemorySegment pwd, long pwdlen, MemorySegment salt, long saltlen, MemorySegment hash, long hashlen, MemorySegment encoded, long encodedlen, int type, int version) {
        var mh$ = argon2_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2_hash", t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hash, hashlen, encoded, encodedlen, type, version);
            }
            return (int)mh$.invokeExact(t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hash, hashlen, encoded, encodedlen, type, version);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2i_verify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_POINTER,
            argon2_h.C_LONG
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2i_verify");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2i_verify(const char *encoded, const void *pwd, const size_t pwdlen)
     * }
     */
    public static FunctionDescriptor argon2i_verify$descriptor() {
        return argon2i_verify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2i_verify(const char *encoded, const void *pwd, const size_t pwdlen)
     * }
     */
    public static MethodHandle argon2i_verify$handle() {
        return argon2i_verify.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2i_verify(const char *encoded, const void *pwd, const size_t pwdlen)
     * }
     */
    public static MemorySegment argon2i_verify$address() {
        return argon2i_verify.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2i_verify(const char *encoded, const void *pwd, const size_t pwdlen)
     * }
     */
    public static int argon2i_verify(MemorySegment encoded, MemorySegment pwd, long pwdlen) {
        var mh$ = argon2i_verify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2i_verify", encoded, pwd, pwdlen);
            }
            return (int)mh$.invokeExact(encoded, pwd, pwdlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2d_verify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_POINTER,
            argon2_h.C_LONG
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2d_verify");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2d_verify(const char *encoded, const void *pwd, const size_t pwdlen)
     * }
     */
    public static FunctionDescriptor argon2d_verify$descriptor() {
        return argon2d_verify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2d_verify(const char *encoded, const void *pwd, const size_t pwdlen)
     * }
     */
    public static MethodHandle argon2d_verify$handle() {
        return argon2d_verify.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2d_verify(const char *encoded, const void *pwd, const size_t pwdlen)
     * }
     */
    public static MemorySegment argon2d_verify$address() {
        return argon2d_verify.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2d_verify(const char *encoded, const void *pwd, const size_t pwdlen)
     * }
     */
    public static int argon2d_verify(MemorySegment encoded, MemorySegment pwd, long pwdlen) {
        var mh$ = argon2d_verify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2d_verify", encoded, pwd, pwdlen);
            }
            return (int)mh$.invokeExact(encoded, pwd, pwdlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2id_verify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_POINTER,
            argon2_h.C_LONG
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2id_verify");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2id_verify(const char *encoded, const void *pwd, const size_t pwdlen)
     * }
     */
    public static FunctionDescriptor argon2id_verify$descriptor() {
        return argon2id_verify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2id_verify(const char *encoded, const void *pwd, const size_t pwdlen)
     * }
     */
    public static MethodHandle argon2id_verify$handle() {
        return argon2id_verify.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2id_verify(const char *encoded, const void *pwd, const size_t pwdlen)
     * }
     */
    public static MemorySegment argon2id_verify$address() {
        return argon2id_verify.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2id_verify(const char *encoded, const void *pwd, const size_t pwdlen)
     * }
     */
    public static int argon2id_verify(MemorySegment encoded, MemorySegment pwd, long pwdlen) {
        var mh$ = argon2id_verify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2id_verify", encoded, pwd, pwdlen);
            }
            return (int)mh$.invokeExact(encoded, pwd, pwdlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2_verify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_POINTER,
            argon2_h.C_LONG,
            argon2_h.C_INT
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2_verify");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2_verify(const char *encoded, const void *pwd, const size_t pwdlen, argon2_type type)
     * }
     */
    public static FunctionDescriptor argon2_verify$descriptor() {
        return argon2_verify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2_verify(const char *encoded, const void *pwd, const size_t pwdlen, argon2_type type)
     * }
     */
    public static MethodHandle argon2_verify$handle() {
        return argon2_verify.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2_verify(const char *encoded, const void *pwd, const size_t pwdlen, argon2_type type)
     * }
     */
    public static MemorySegment argon2_verify$address() {
        return argon2_verify.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2_verify(const char *encoded, const void *pwd, const size_t pwdlen, argon2_type type)
     * }
     */
    public static int argon2_verify(MemorySegment encoded, MemorySegment pwd, long pwdlen, int type) {
        var mh$ = argon2_verify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2_verify", encoded, pwd, pwdlen, type);
            }
            return (int)mh$.invokeExact(encoded, pwd, pwdlen, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2d_ctx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_POINTER
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2d_ctx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2d_ctx(argon2_context *context)
     * }
     */
    public static FunctionDescriptor argon2d_ctx$descriptor() {
        return argon2d_ctx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2d_ctx(argon2_context *context)
     * }
     */
    public static MethodHandle argon2d_ctx$handle() {
        return argon2d_ctx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2d_ctx(argon2_context *context)
     * }
     */
    public static MemorySegment argon2d_ctx$address() {
        return argon2d_ctx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2d_ctx(argon2_context *context)
     * }
     */
    public static int argon2d_ctx(MemorySegment context) {
        var mh$ = argon2d_ctx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2d_ctx", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2i_ctx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_POINTER
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2i_ctx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2i_ctx(argon2_context *context)
     * }
     */
    public static FunctionDescriptor argon2i_ctx$descriptor() {
        return argon2i_ctx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2i_ctx(argon2_context *context)
     * }
     */
    public static MethodHandle argon2i_ctx$handle() {
        return argon2i_ctx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2i_ctx(argon2_context *context)
     * }
     */
    public static MemorySegment argon2i_ctx$address() {
        return argon2i_ctx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2i_ctx(argon2_context *context)
     * }
     */
    public static int argon2i_ctx(MemorySegment context) {
        var mh$ = argon2i_ctx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2i_ctx", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2id_ctx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_POINTER
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2id_ctx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2id_ctx(argon2_context *context)
     * }
     */
    public static FunctionDescriptor argon2id_ctx$descriptor() {
        return argon2id_ctx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2id_ctx(argon2_context *context)
     * }
     */
    public static MethodHandle argon2id_ctx$handle() {
        return argon2id_ctx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2id_ctx(argon2_context *context)
     * }
     */
    public static MemorySegment argon2id_ctx$address() {
        return argon2id_ctx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2id_ctx(argon2_context *context)
     * }
     */
    public static int argon2id_ctx(MemorySegment context) {
        var mh$ = argon2id_ctx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2id_ctx", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2d_verify_ctx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_POINTER
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2d_verify_ctx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2d_verify_ctx(argon2_context *context, const char *hash)
     * }
     */
    public static FunctionDescriptor argon2d_verify_ctx$descriptor() {
        return argon2d_verify_ctx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2d_verify_ctx(argon2_context *context, const char *hash)
     * }
     */
    public static MethodHandle argon2d_verify_ctx$handle() {
        return argon2d_verify_ctx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2d_verify_ctx(argon2_context *context, const char *hash)
     * }
     */
    public static MemorySegment argon2d_verify_ctx$address() {
        return argon2d_verify_ctx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2d_verify_ctx(argon2_context *context, const char *hash)
     * }
     */
    public static int argon2d_verify_ctx(MemorySegment context, MemorySegment hash) {
        var mh$ = argon2d_verify_ctx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2d_verify_ctx", context, hash);
            }
            return (int)mh$.invokeExact(context, hash);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2i_verify_ctx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_POINTER
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2i_verify_ctx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2i_verify_ctx(argon2_context *context, const char *hash)
     * }
     */
    public static FunctionDescriptor argon2i_verify_ctx$descriptor() {
        return argon2i_verify_ctx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2i_verify_ctx(argon2_context *context, const char *hash)
     * }
     */
    public static MethodHandle argon2i_verify_ctx$handle() {
        return argon2i_verify_ctx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2i_verify_ctx(argon2_context *context, const char *hash)
     * }
     */
    public static MemorySegment argon2i_verify_ctx$address() {
        return argon2i_verify_ctx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2i_verify_ctx(argon2_context *context, const char *hash)
     * }
     */
    public static int argon2i_verify_ctx(MemorySegment context, MemorySegment hash) {
        var mh$ = argon2i_verify_ctx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2i_verify_ctx", context, hash);
            }
            return (int)mh$.invokeExact(context, hash);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2id_verify_ctx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_POINTER
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2id_verify_ctx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2id_verify_ctx(argon2_context *context, const char *hash)
     * }
     */
    public static FunctionDescriptor argon2id_verify_ctx$descriptor() {
        return argon2id_verify_ctx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2id_verify_ctx(argon2_context *context, const char *hash)
     * }
     */
    public static MethodHandle argon2id_verify_ctx$handle() {
        return argon2id_verify_ctx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2id_verify_ctx(argon2_context *context, const char *hash)
     * }
     */
    public static MemorySegment argon2id_verify_ctx$address() {
        return argon2id_verify_ctx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2id_verify_ctx(argon2_context *context, const char *hash)
     * }
     */
    public static int argon2id_verify_ctx(MemorySegment context, MemorySegment hash) {
        var mh$ = argon2id_verify_ctx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2id_verify_ctx", context, hash);
            }
            return (int)mh$.invokeExact(context, hash);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2_verify_ctx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_INT,
            argon2_h.C_POINTER,
            argon2_h.C_POINTER,
            argon2_h.C_INT
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2_verify_ctx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int argon2_verify_ctx(argon2_context *context, const char *hash, argon2_type type)
     * }
     */
    public static FunctionDescriptor argon2_verify_ctx$descriptor() {
        return argon2_verify_ctx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int argon2_verify_ctx(argon2_context *context, const char *hash, argon2_type type)
     * }
     */
    public static MethodHandle argon2_verify_ctx$handle() {
        return argon2_verify_ctx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int argon2_verify_ctx(argon2_context *context, const char *hash, argon2_type type)
     * }
     */
    public static MemorySegment argon2_verify_ctx$address() {
        return argon2_verify_ctx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int argon2_verify_ctx(argon2_context *context, const char *hash, argon2_type type)
     * }
     */
    public static int argon2_verify_ctx(MemorySegment context, MemorySegment hash, int type) {
        var mh$ = argon2_verify_ctx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2_verify_ctx", context, hash, type);
            }
            return (int)mh$.invokeExact(context, hash, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2_error_message {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_POINTER,
            argon2_h.C_INT
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2_error_message");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *argon2_error_message(int error_code)
     * }
     */
    public static FunctionDescriptor argon2_error_message$descriptor() {
        return argon2_error_message.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *argon2_error_message(int error_code)
     * }
     */
    public static MethodHandle argon2_error_message$handle() {
        return argon2_error_message.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *argon2_error_message(int error_code)
     * }
     */
    public static MemorySegment argon2_error_message$address() {
        return argon2_error_message.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *argon2_error_message(int error_code)
     * }
     */
    public static MemorySegment argon2_error_message(int error_code) {
        var mh$ = argon2_error_message.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2_error_message", error_code);
            }
            return (MemorySegment)mh$.invokeExact(error_code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class argon2_encodedlen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            argon2_h.C_LONG,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT,
            argon2_h.C_INT
        );

        public static final MemorySegment ADDR = argon2_h.findOrThrow("argon2_encodedlen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t argon2_encodedlen(uint32_t t_cost, uint32_t m_cost, uint32_t parallelism, uint32_t saltlen, uint32_t hashlen, argon2_type type)
     * }
     */
    public static FunctionDescriptor argon2_encodedlen$descriptor() {
        return argon2_encodedlen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t argon2_encodedlen(uint32_t t_cost, uint32_t m_cost, uint32_t parallelism, uint32_t saltlen, uint32_t hashlen, argon2_type type)
     * }
     */
    public static MethodHandle argon2_encodedlen$handle() {
        return argon2_encodedlen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t argon2_encodedlen(uint32_t t_cost, uint32_t m_cost, uint32_t parallelism, uint32_t saltlen, uint32_t hashlen, argon2_type type)
     * }
     */
    public static MemorySegment argon2_encodedlen$address() {
        return argon2_encodedlen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t argon2_encodedlen(uint32_t t_cost, uint32_t m_cost, uint32_t parallelism, uint32_t saltlen, uint32_t hashlen, argon2_type type)
     * }
     */
    public static long argon2_encodedlen(int t_cost, int m_cost, int parallelism, int saltlen, int hashlen, int type) {
        var mh$ = argon2_encodedlen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("argon2_encodedlen", t_cost, m_cost, parallelism, saltlen, hashlen, type);
            }
            return (long)mh$.invokeExact(t_cost, m_cost, parallelism, saltlen, hashlen, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final int __WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return __WCHAR_MAX;
    }
    private static final int __WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return __WCHAR_MIN;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final long INT_FAST16_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final long INT_FAST32_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final long INT_FAST16_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final long INT_FAST32_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final long UINT_FAST16_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final long UINT_FAST32_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WINT_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final long LLONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return LLONG_MIN;
    }
    private static final long LLONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return LLONG_MAX;
    }
    private static final long ULLONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return ULLONG_MAX;
    }
    private static final int PTHREAD_DESTRUCTOR_ITERATIONS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define PTHREAD_DESTRUCTOR_ITERATIONS 4
     * }
     */
    public static int PTHREAD_DESTRUCTOR_ITERATIONS() {
        return PTHREAD_DESTRUCTOR_ITERATIONS;
    }
    private static final int SEM_VALUE_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SEM_VALUE_MAX 2147483647
     * }
     */
    public static int SEM_VALUE_MAX() {
        return SEM_VALUE_MAX;
    }
    private static final long SSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define SSIZE_MAX 9223372036854775807
     * }
     */
    public static long SSIZE_MAX() {
        return SSIZE_MAX;
    }
    private static final int BC_BASE_MAX = (int)99L;
    /**
     * {@snippet lang=c :
     * #define BC_BASE_MAX 99
     * }
     */
    public static int BC_BASE_MAX() {
        return BC_BASE_MAX;
    }
    private static final int BC_DIM_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define BC_DIM_MAX 2048
     * }
     */
    public static int BC_DIM_MAX() {
        return BC_DIM_MAX;
    }
    private static final int BC_SCALE_MAX = (int)99L;
    /**
     * {@snippet lang=c :
     * #define BC_SCALE_MAX 99
     * }
     */
    public static int BC_SCALE_MAX() {
        return BC_SCALE_MAX;
    }
    private static final int BC_STRING_MAX = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define BC_STRING_MAX 1000
     * }
     */
    public static int BC_STRING_MAX() {
        return BC_STRING_MAX;
    }
    private static final int EXPR_NEST_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define EXPR_NEST_MAX 32
     * }
     */
    public static int EXPR_NEST_MAX() {
        return EXPR_NEST_MAX;
    }
    private static final int LINE_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define LINE_MAX 2048
     * }
     */
    public static int LINE_MAX() {
        return LINE_MAX;
    }
    private static final int RE_DUP_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define RE_DUP_MAX 32767
     * }
     */
    public static int RE_DUP_MAX() {
        return RE_DUP_MAX;
    }
    private static final int SCHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MAX 127
     * }
     */
    public static int SCHAR_MAX() {
        return SCHAR_MAX;
    }
    private static final int SHRT_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MAX 32767
     * }
     */
    public static int SHRT_MAX() {
        return SHRT_MAX;
    }
    private static final int INT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_MAX 2147483647
     * }
     */
    public static int INT_MAX() {
        return INT_MAX;
    }
    private static final long LONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_MAX() {
        return LONG_MAX;
    }
    private static final int SCHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return SCHAR_MIN;
    }
    private static final int SHRT_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return SHRT_MIN;
    }
    private static final int INT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return INT_MIN;
    }
    private static final long LONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_MIN() {
        return LONG_MIN;
    }
    private static final int UCHAR_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UCHAR_MAX 255
     * }
     */
    public static int UCHAR_MAX() {
        return UCHAR_MAX;
    }
    private static final int USHRT_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define USHRT_MAX 65535
     * }
     */
    public static int USHRT_MAX() {
        return USHRT_MAX;
    }
    private static final int UINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return UINT_MAX;
    }
    private static final long ULONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULONG_MAX -1
     * }
     */
    public static long ULONG_MAX() {
        return ULONG_MAX;
    }
    private static final int CHAR_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CHAR_BIT 8
     * }
     */
    public static int CHAR_BIT() {
        return CHAR_BIT;
    }
    private static final int CHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return CHAR_MIN;
    }
    private static final int CHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MAX 127
     * }
     */
    public static int CHAR_MAX() {
        return CHAR_MAX;
    }
    private static final int ARGON2_MIN_LANES = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MIN_LANES 1
     * }
     */
    public static int ARGON2_MIN_LANES() {
        return ARGON2_MIN_LANES;
    }
    private static final int ARGON2_MAX_LANES = (int)16777215L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MAX_LANES 16777215
     * }
     */
    public static int ARGON2_MAX_LANES() {
        return ARGON2_MAX_LANES;
    }
    private static final int ARGON2_MIN_THREADS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MIN_THREADS 1
     * }
     */
    public static int ARGON2_MIN_THREADS() {
        return ARGON2_MIN_THREADS;
    }
    private static final int ARGON2_MAX_THREADS = (int)16777215L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MAX_THREADS 16777215
     * }
     */
    public static int ARGON2_MAX_THREADS() {
        return ARGON2_MAX_THREADS;
    }
    private static final int ARGON2_SYNC_POINTS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_SYNC_POINTS 4
     * }
     */
    public static int ARGON2_SYNC_POINTS() {
        return ARGON2_SYNC_POINTS;
    }
    private static final int ARGON2_MIN_OUTLEN = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MIN_OUTLEN 4
     * }
     */
    public static int ARGON2_MIN_OUTLEN() {
        return ARGON2_MIN_OUTLEN;
    }
    private static final int ARGON2_MAX_OUTLEN = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MAX_OUTLEN 4294967295
     * }
     */
    public static int ARGON2_MAX_OUTLEN() {
        return ARGON2_MAX_OUTLEN;
    }
    private static final int ARGON2_MIN_MEMORY = (int)8L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MIN_MEMORY 8
     * }
     */
    public static int ARGON2_MIN_MEMORY() {
        return ARGON2_MIN_MEMORY;
    }
    private static final long ARGON2_MAX_MEMORY_BITS = 32L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MAX_MEMORY_BITS 32
     * }
     */
    public static long ARGON2_MAX_MEMORY_BITS() {
        return ARGON2_MAX_MEMORY_BITS;
    }
    private static final long ARGON2_MAX_MEMORY = 4294967295L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MAX_MEMORY 4294967295
     * }
     */
    public static long ARGON2_MAX_MEMORY() {
        return ARGON2_MAX_MEMORY;
    }
    private static final int ARGON2_MIN_TIME = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MIN_TIME 1
     * }
     */
    public static int ARGON2_MIN_TIME() {
        return ARGON2_MIN_TIME;
    }
    private static final int ARGON2_MAX_TIME = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MAX_TIME 4294967295
     * }
     */
    public static int ARGON2_MAX_TIME() {
        return ARGON2_MAX_TIME;
    }
    private static final int ARGON2_MIN_PWD_LENGTH = (int)0L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MIN_PWD_LENGTH 0
     * }
     */
    public static int ARGON2_MIN_PWD_LENGTH() {
        return ARGON2_MIN_PWD_LENGTH;
    }
    private static final int ARGON2_MAX_PWD_LENGTH = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MAX_PWD_LENGTH 4294967295
     * }
     */
    public static int ARGON2_MAX_PWD_LENGTH() {
        return ARGON2_MAX_PWD_LENGTH;
    }
    private static final int ARGON2_MIN_AD_LENGTH = (int)0L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MIN_AD_LENGTH 0
     * }
     */
    public static int ARGON2_MIN_AD_LENGTH() {
        return ARGON2_MIN_AD_LENGTH;
    }
    private static final int ARGON2_MAX_AD_LENGTH = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MAX_AD_LENGTH 4294967295
     * }
     */
    public static int ARGON2_MAX_AD_LENGTH() {
        return ARGON2_MAX_AD_LENGTH;
    }
    private static final int ARGON2_MIN_SALT_LENGTH = (int)8L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MIN_SALT_LENGTH 8
     * }
     */
    public static int ARGON2_MIN_SALT_LENGTH() {
        return ARGON2_MIN_SALT_LENGTH;
    }
    private static final int ARGON2_MAX_SALT_LENGTH = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MAX_SALT_LENGTH 4294967295
     * }
     */
    public static int ARGON2_MAX_SALT_LENGTH() {
        return ARGON2_MAX_SALT_LENGTH;
    }
    private static final int ARGON2_MIN_SECRET = (int)0L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MIN_SECRET 0
     * }
     */
    public static int ARGON2_MIN_SECRET() {
        return ARGON2_MIN_SECRET;
    }
    private static final int ARGON2_MAX_SECRET = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_MAX_SECRET 4294967295
     * }
     */
    public static int ARGON2_MAX_SECRET() {
        return ARGON2_MAX_SECRET;
    }
    private static final int ARGON2_DEFAULT_FLAGS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_DEFAULT_FLAGS 0
     * }
     */
    public static int ARGON2_DEFAULT_FLAGS() {
        return ARGON2_DEFAULT_FLAGS;
    }
    private static final int ARGON2_FLAG_CLEAR_PASSWORD = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_FLAG_CLEAR_PASSWORD 1
     * }
     */
    public static int ARGON2_FLAG_CLEAR_PASSWORD() {
        return ARGON2_FLAG_CLEAR_PASSWORD;
    }
    private static final int ARGON2_FLAG_CLEAR_SECRET = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ARGON2_FLAG_CLEAR_SECRET 2
     * }
     */
    public static int ARGON2_FLAG_CLEAR_SECRET() {
        return ARGON2_FLAG_CLEAR_SECRET;
    }
}

